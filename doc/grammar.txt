program = 
    | statement*

statement = 
    | let_statement
    | expression_statement
    | 
    ;

expression = 
    | prefix_unary_expression
    | binary_expression
    | assignment_expression
    | if_else_expression
    | call_expression
    | seal_expression
    | freeze_expression
    | delete_expression
    | atom
    ;

prefix_unary_expression = 
    | ('-' | '+') !whitespace expression

binary_expression =
    | expression ('+' | '-' | '/' | '*' | '.') expression
    ;

assignment_expression =
    | 'var'? assignment_left_expression '=' expression
    ;

assignment_left_expression =
    | identifier
    | dot_expression
    | index_expression

if_else_expression =
    | "if" expression ":" statement* ("elif" expression ":" statement*)* ("end" | ("else" expression ":" statement* "end"))

block =
    | ":" statement* "end"
    ;

call_expression =
    | expression "(" ((expression comma)* expression)? ")"

index_expression =
    | expression "[" expression "]"

seal_expression = 
    | 'seal' expression
    ;

freeze_expression =
    | 'freeze' expression
    ;

delete_expression = 
    | 'delete' expression
    ;

dot_expression = 
    | identifier ('.' identifier)*
    ;

whitespace = ' ' | '\t' | '\n' | '\r';

atom = 
    | number_literal
    | string_literal
    | object_literal
    | bool_literal
    | none_literal
    | identifier
    ;

number_literal = '0-9'+;
object_literal = object_modifier? '{' object_literal_entry* '}';
object_literal_entry = var? (identifier | '[' expression ']') = expression comma?;
bool_literal = 'True' | 'False';
none_literal = 'None';

object_modifier = 'sealed' | 'frozen';